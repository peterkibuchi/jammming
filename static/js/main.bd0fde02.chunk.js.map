{"version":3,"sources":["util/Spotify.js","components/AppDescription/AppDescription.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","index.js"],"names":["accessToken","clientID","process","REACT_APP_SPOTIFY_CLIENT_ID","Spotify","getAccessToken","url","window","location","href","accessTokenMatch","match","expiryMatch","expiry","Number","setTimeout","history","pushState","accessURL","search","query","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackURIs","userID","method","body","JSON","stringify","public","playlistID","uris","AppDescription","className","target","rel","Component","SearchBar","props","state","bind","handleTermChange","event","newQuery","value","this","setState","onSearch","placeholder","onChange","onClick","Track","addTrack","removeTrack","onAdd","onRemove","add","class","remove","isRemoval","renderAction","TrackList","SearchResults","searchResults","Playlist","handleNameChange","e","onNameChange","defaultValue","playlistTracks","onSave","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd0fde02.chunk.js","sourcesContent":["const clientID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\nconst redirectURI = \"http://localhost:3000/\";\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n\n        // Check for access token and expiry duration in the url\n        const url = window.location.href;\n        const accessTokenMatch = url.match(/access_token=([^&]*)/);\n        const expiryMatch = url.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiryMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiry = Number(expiryMatch[1]);\n\n            // Clears the parameters from the URL, so the app doesnâ€™t try grabbing\n            // the access token after it has expired. Instead, we grab a new one.\n            window.setTimeout(() => accessToken = '', expiry * 1000);\n            window.history.pushState('Access Token', null, '/');\n\n            return accessToken;\n        } else {\n            // Redirects user to a login page, after which they grant permissions to the app\n            const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&redirect_uri=${redirectURI}&response_type=token&scope=playlist-modify-private`;\n            window.location = accessURL;\n        }\n    },\n\n    search(query) {\n        const accessToken = Spotify.getAccessToken();\n\n        return (\n            fetch(\n                `https://api.spotify.com/v1/search?type=track&q=${query}`,\n                {\n                    headers: {\n                        Authorization: `Bearer ${accessToken}`,\n                    },\n                }\n            ).then((response) => {\n                return response.json();\n            }).then((jsonResponse) => {\n                if (!jsonResponse.tracks) {\n                    return [];\n                }\n\n                // maps the converted JSON to an array of track objects and returns it\n                return jsonResponse.tracks.items.map((track) => {\n                    return {\n                        id: track.id,\n                        name: track.name,\n                        artist: track.artists[0].name,\n                        album: track.album.name,\n                        uri: track.uri\n                    };\n                });\n            })\n        );\n    },\n\n    savePlaylist(name, trackURIs) {\n        if (!name || !trackURIs) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessToken}`,\n        };\n        let userID;\n\n        return (\n            fetch(\n                \"https://api.spotify.com/v1/me\",\n                {\n                    headers: headers,\n                }\n            ).then((response) => {\n                return response.json();\n            }).then((jsonResponse) => {\n                userID = jsonResponse.id;\n\n                return (\n                    fetch(\n                        `https://api.spotify.com/v1/users/${userID}/playlists`,\n                        {\n                            method: 'POST',\n                            headers: headers,\n                            body: JSON.stringify({\n                                name: name,\n                                public: false,\n                            })\n                        }\n                    )\n                );\n            }).then((response) => {\n                return response.json();\n            }).then((jsonResponse) => {\n                const playlistID = jsonResponse.id;\n\n                return fetch(\n                    `https://api.spotify.com/v1/playlists/${playlistID}/tracks`,\n                    {\n                        method: 'POST',\n                        headers: headers,\n                        body: JSON.stringify({\n                            uris: trackURIs,\n                        }),\n                    }\n                );\n            })\n        );\n    }\n};\n\nexport default Spotify;\n","import React, {Component} from 'react';\nimport './AppDescription.css';\n\nexport class AppDescription extends Component {\n    render() {\n        return (\n            <div className=\"Description\">\n                <p>\n                    Welcome. Jammming is a web application that allows you to search the Spotify \n                    library, create a custom playlist, name it, and save it to your Spotify account. \n                    Playlists will be set to private by default.\n                </p>\n                <p>\n                    To function, Jammming will require you to log in to your Spotify account, after which it \n                    will request permission to act on your behalf. You can revoke this permission at any time at \n                    <a href=\"https://www.spotify.com/account/apps/\" target=\"_blank\" rel=\"noopener noreferrer\"> spotify.com/account</a>.\n                </p>\n                <p>\n                    To get started, simply search for music content of your choice. The \n                    application will take care of the rest. If at any point the website \n                    becomes unresponsive, simply reload the page. Enjoy.\n                </p>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './SearchBar.css';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: \"\",\n        }\n\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    handleTermChange(event) {\n        let newQuery = event.target.value;\n        this.setState({query: newQuery});\n    }\n\n    search() {\n        this.props.onSearch(this.state.query);\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input\n                    placeholder=\"Enter a song, album, or artist\"\n                    onChange={this.handleTermChange}\n                />\n\n                <button className=\"SearchButton\" onClick={this.search}>\n                    SEARCH\n                </button>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './Track.css';\n\nexport class Track extends Component {\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n\n    renderAction() {\n        const add = <button class=\"Track-action\" onClick={this.addTrack}>+</button>;\n        const remove = <button class=\"Track-action\" onClick={this.removeTrack}>â€”</button>;\n\n        return (this.props.isRemoval) ? remove : add;\n    }\n\n    render() {\n        const track = this.props.track;\n\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{track.name}</h3>\n                    <p>{track.artist} | {track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './TrackList.css';\nimport { Track } from '../Track/Track';\n\nexport class TrackList extends Component {\n    render() {\n        // tracksArray is an array of json objects representing tracks\n        const tracksArray = this.props.tracks;\n        const tracks = tracksArray.map((track) => {\n            return (\n                <Track\n                    key={track.id}\n                    track={track}\n                    onAdd={this.props.onAdd}\n                    onRemove={this.props.onRemove}\n                    isRemoval={this.props.isRemoval}\n                />\n            );\n        });\n\n        return (\n            <div className=\"TrackList\">\n                {tracks}\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './SearchResults.css';\nimport { TrackList } from '../TrackList/TrackList';\n\nexport class SearchResults extends Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n\n                <TrackList\n                    tracks={this.props.searchResults}\n                    onAdd={this.props.onAdd} \n                    isRemoval={false}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './Playlist.css';\nimport { TrackList } from '../TrackList/TrackList';\n\nexport class Playlist extends Component {\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(e) {\n        this.props.onNameChange(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input\n                    defaultValue={'New Playlist'} \n                    onChange={this.handleNameChange}\n                />\n\n                <TrackList\n                    tracks={this.props.playlistTracks}\n                    onRemove={this.props.onRemove}\n                    isRemoval={true}\n                />\n\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>\n                    SAVE TO SPOTIFY\n                </button>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Spotify from '../../util/Spotify';\nimport { AppDescription } from '../AppDescription/AppDescription';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { SearchResults } from '../SearchResults/SearchResults';\nimport { Playlist } from '../Playlist/Playlist';\n\nexport class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchResults: [],\n            playlistName: \"My Playlist\",\n            playlistTracks: [],\n        };\n\n        this.search = this.search.bind(this);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n        this.savePlaylist = this.savePlaylist.bind(this);\n        this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    }\n\n    search(query) {\n        // Spotify.search() returns a promise that resolves to the search results\n        Spotify.search(query).then((searchResults) => {\n            this.setState({searchResults: searchResults});\n        });\n    }\n\n    // Checks whether track already exists in playlist. If it doesn't, it appends it.\n    addTrack(track) {\n        const playlistTracks = this.state.playlistTracks;\n\n        if (playlistTracks.find((savedTrack) => savedTrack.id === track.id)) {\n            return;\n        } else {\n            playlistTracks.push(track);\n            this.setState({playlistTracks: playlistTracks});\n        }\n    }\n\n    // Filters out the given track and updates the state\n    removeTrack(track) {\n        let playlistTracks = this.state.playlistTracks;\n\n        playlistTracks = playlistTracks.filter(savedTrack => savedTrack.id !== track.id);\n        this.setState({playlistTracks: playlistTracks});\n    }\n\n    // Takes in a name uses it to update state\n    updatePlaylistName(name) {\n        this.setState({playlistName: name});\n    }\n\n    savePlaylist() {\n        const playlistName = this.state.playlistName;\n        const playlistTracks = this.state.playlistTracks;\n        const trackURIs = playlistTracks.map((savedTrack) => savedTrack.uri);\n\n        // Saves the playlist to Spotify then resets state\n        Spotify.savePlaylist(playlistName, trackURIs).then(() => {\n            this.setState({\n                playlistName: \"New Playlist\",\n                playlistTracks: [],\n            })\n        })\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n                <div className=\"App\">\n\n                    <AppDescription />\n                    <SearchBar onSearch={this.search} />\n\n                    <div className=\"App-playlist\">\n                        <SearchResults\n                            searchResults={this.state.searchResults}\n                            onAdd={this.addTrack}\n                        />\n                        <Playlist\n                            playlistName={this.state.playlistName} \n                            playlistTracks={this.state.playlistTracks}\n                            onNameChange={this.updatePlaylistName}\n                            onRemove={this.removeTrack}\n                            onSave={this.savePlaylist}\n                        />\n                    </div>\n\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}